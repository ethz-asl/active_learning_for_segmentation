<launch>

    <!-- Voxblox arguments -->
    <arg name="voxel_size" default="0.1"/>
    <arg name="voxels_per_side" default="16"/>
    <arg name="ray_length" default="20.0"/>
    <arg name="method" default="fast"/>
    <arg name="verbose_voxblox" default="false"/>
    <arg name="delay" default="3.0"/>

    <arg name="mav_name" default="drone_1"/>

    <!--  Experiment arguments -->
    <arg name="experiment_config" default="CityBuilding.yaml"/>
    <arg name="experiment_config_embodied" default="SimpleBaseline.yaml"/>

    <rosparam command="load" file="$(find active_3d_planning_app_curiosity)cfg/experiments/$(arg experiment_config)"/>
    <rosparam command="load" file="$(find embodied_active_learning)cfg/experiments/$(arg experiment_config_embodied)"/>

    <!-- static world transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_drone_world" args="0 0 0 0 0 0 1 /drone_1 /world 100"/>


    <node name="minimap_node" pkg="embodied_active_learning" type="minimap_node.py" output="screen"
          required="false" cwd="node">
        <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
    </node>

    <!-- Uncertainty Management -->
    <group ns="uncertainty">
        <!-- Uncertainty Node, segments images and publishes segmentation + uncertainty -->
        <node name="uncertainty_node" pkg="embodied_active_learning" type="uncertainty_estimation_node.py"
              output="screen"
              required="true" cwd="node">
            <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
            <remap from="cameraInfo" to="/airsim/airsim_node/$(arg mav_name)/front/Scene/camera_info"/>
            <remap from="rgbImage" to="/airsim/airsim_node/$(arg mav_name)/front/Scene"/>
            <remap from="depthImage" to="/airsim/airsim_node/$(arg mav_name)/front/DepthPlanner"/>
        </node>

        <node name="voxblox_uncertainty_node" pkg="voxblox_ros" type="esdf_server" output="screen"
              args="-alsologtostderr">
            <remap from="pointcloud" to="/semseg/points"/>
            <param name="publish_tsdf_map" value="true"/>
            <param name="publish_esdf_map" value="true"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="color_mode" value="color"/>
            <param name="intensity_colormap" value="rainbow"/>
            <param name="update_mesh_every_n_sec" value="1.0"/>
            <param name="method" value="$(arg method)"/>
            <param name="max_ray_length" value="$(arg ray_length)"/>
            <param name="allow_clear" value="true"/>
            <param name="verbose" value="$(arg verbose_voxblox)"/>
            <param name="publish_map_incremental" value="true"/>
            <param name="min_ray_length_m" value="0.2"/>
        </node>

    </group>

    <group ns="experiment">
        <!-- Experiment launcher. Starts Planner, Captures Images etc. -->
        <node name="experiment_node" pkg="embodied_active_learning" type="airsim_experiment.py" output="screen"
              required="true">
            <param name="ns_planner" value="/planner/planner_node"/>
            <param name="ns_airsim" value="/airsim/airsim_node"/>
            <param name="delay" value="$(arg delay)"/>
            <param name="startup_timeout" value="30.0"/>

            <remap from="rgbImage" to="/airsim/airsim_node/$(arg mav_name)/front/Scene"/>
            <remap from ="depthImage" to = "/airsim/airsim_node/$(arg mav_name)/front/DepthPlanner"/>
            <remap from ="semsegImage" to = "/semseg/image"/>

        </node>
    </group>


    <group ns="airsim">
        <!-- Airsim Node that Publishes Odometry and Images -->
        <include file="$(find airsim_ros_pkgs)/launch/airsim_node.launch"/>

        <!-- Airsim position controller -->
        <node name="pid_position_node" pkg="airsim_ros_pkgs" type="pd_position_controller_simple_node" output="screen">

            <remap from="/airsim_node/odom_local_ned" to="airsim_node/drone_1/odom_local_ned"/>
            <remap from="/airsim_node/home_geo_point" to="airsim_node/origin_geo_point"/>
            <remap from="/vel_cmd_world_frame" to="airsim_node/drone_1/vel_cmd_world_frame"/>
            <remap from="/airsim_node/gps_goal" to="airsim_node/gps_goal"/>
            <remap from="/airsim_node/local_position_goal/" to="airsim_node/local_position_goal/override"/>

            <param name="update_control_every_n_sec" type="double"
                   value="0.01"/> <!-- this needs to be in sync with airsim_ros_wrapper? -->
            <param name="kp_x" type="double" value="0.30"/>
            <param name="kp_y" type="double" value="0.30"/>
            <param name="kp_z" type="double" value="0.30"/>
            <param name="kp_yaw" type="double" value="0.30"/>

            <param name="kd_x" type="double" value="0.05"/>
            <param name="kd_y" type="double" value="0.05"/>
            <param name="kd_z" type="double" value="0.05"/>
            <param name="kd_yaw" type="double" value="0.05"/>

            <param name="reached_thresh_xyz" type="double" value="0.1"/>
            <param name="reached_yaw_degrees" type="double" value="5.0"/>
        </node>


        <!-- Node that connects trajectory planner with Airsim PID Position Controller -->
        <node type="trajectory_caller_node" name="trajectory_caller_node" pkg="active_3d_planning_app_curiosity">
            <remap from="/local_position_goal" to="airsim_node/local_position_goal/override"/>
            <remap from="/command/trajectory" to="$(arg mav_name)/command/trajectory"/>
            <remap from="/odom" to="airsim_node/drone_1/odom_local_ned"/>
        </node>


        <!-- Nodelet Manager-->
        <node pkg="nodelet" type="nodelet" args="manager" name="depth_to_pointcloud_manager" output="screen"/>

        <!-- Convert airsim images to pointclouds -->
        <node pkg="nodelet" type="nodelet" name="airsim_depth2cloud"
              args="load depth_image_proc/point_cloud_xyzrgb depth_to_pointcloud_manager" output="screen">
            <remap from="depth_registered/image_rect" to="airsim_node/drone_1/front/DepthPlanner"/>
            <remap from="depth_registered/points" to="airsim_node/drone_1/front/DepthPlanner/registered/points"/>
            <remap from="rgb/image_rect_color" to="airsim_node/drone_1/front/Scene"/>
            <remap from="rgb/camera_info" to="airsim_node/drone_1/front/Scene/camera_info"/>
        </node>

    </group>

    <group ns="planner">
        <!-- Voxblox -->
        <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
            <remap from="pointcloud" to="/airsim/airsim_node/drone_1/front/DepthPlanner/registered/points"/>

            <!--            <param name="use_tf_transforms" value="true"/>-->
            <param name="publish_tsdf_map" value="true"/>
            <param name="publish_esdf_map" value="true"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="color_mode" value="color"/>
            <param name="update_mesh_every_n_sec" value="1.0"/>
            <param name="method" value="$(arg method)"/>
            <param name="max_ray_length" value="$(arg ray_length)"/>
            <param name="allow_clear" value="true"/>
            <param name="verbose" value="$(arg verbose_voxblox)"/>
            <param name="publish_map_incremental" value="true"/>
            <param name="min_ray_length_m" value="0.2"/>
        </node>

    </group>

    <!-- RVIZ Visualization -->
    <node type="rviz" name="rviz_voxblox" pkg="rviz"
          args="-d $(find embodied_active_learning)/cfg/rviz.rviz"/>


</launch>
