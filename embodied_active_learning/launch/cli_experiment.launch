<launch>
    <!--  Experiment arguments -->
    <param name="experiment_name" value="$(arg experiment_name)"/>
    <!-- located in this package, contains params for uncertainty estimation and data acquisation -->
    <!-- publish uncertainty -->
    <arg name="uncertainty" default="true"/>
    <!-- publish minimap -->
    <arg name="minimap" default="true"/>

    <!--	 Located in planner app package -->
    <!--	<arg name="planner_config" default="exploration_planner.yaml"/>-->
    <!--	<arg name="planner_config" default="random_walker.yaml"/>-->
    <!--	<arg name="map_config" default="CityBuilding.yaml"/>-->
    <arg name="map_config" default="FullFlat/boundary.yaml"/>
    <!-- use airsim simulated time -->
    <param name="/use_sim_time" value="true"/>
    <rosparam command="load" file="$(find embodied_active_learning)cfg/experiments/$(arg map_config)"/>
    <rosparam command="load" file="$(find embodied_active_learning)cfg/experiments/$(arg experiment_config_embodied)"/>

    <arg name="yaw_in_move_direction" default="true"/>
    <!-- Voxblox arguments -->
    <arg name="voxel_size" default="0.1"/>
    <arg name="voxels_per_side" default="16"/>
    <arg name="ray_length" default="30.0"/>
    <arg name="method" default="fast"/>
    <arg name="verbose_voxblox" default="false"/>
    <arg name="delay" default="3.0"/>
    <arg name="publish_mesh" default="3.0"/>
    <arg name="publish_uncertainty_mesh" default="3.0"/>
    <arg name="mav_name" default="drone_1"/>

    <!-- static world transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_drone_world" args="0 0 0 0 0 0 1 /drone_1 /world 100"/>
    <group if="$(arg minimap)">
        <node name="minimap_node" pkg="embodied_active_learning" type="minimap_node.py" output="screen"
              required="false" cwd="node">
            <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
        </node>
    </group>

    <!-- Uncertainty Management -->
    <group ns="uncertainty" if="$(arg uncertainty)">
        <!--           Uncertainty Node, segments images and publishes segmentation + uncertainty-->
        <node name="uncertainty_node" pkg="embodied_active_learning" type="uncertainty_estimation_node.py"
              output="screen"
              required="true" cwd="node">
            <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
            <remap from="cameraInfo" to="/airsim/airsim_node/$(arg mav_name)/front/Scene/camera_info"/>
            <remap from="rgbImage" to="/airsim/airsim_node/$(arg mav_name)/front/Scene"/>
            <remap from="depthImage" to="/airsim/airsim_node/$(arg mav_name)/front/DepthPlanner"/>
            <remap from="semsegGtImage" to="/airsim/airsim_node/$(arg mav_name)/front/Infrared"/>
        </node>
        <node name="voxblox_uncertainty_node" pkg="voxblox_ros" type="esdf_server" output="screen"
              args="-alsologtostderr">
            <remap from="pointcloud" to="/semseg/points"/>
            <param name="use_tf_transforms" value="true"/>
            <param name="publish_tsdf_map" value="true"/>
            <param name="publish_esdf_map" value="true"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="use_const_weight" value="true"/>
            <param name="color_mode" value="color"/>
            <param name="update_mesh_every_n_sec" value="$(arg publish_uncertainty_mesh)"/>
            <param name="method" value="$(arg method)"/>
            <param name="max_ray_length" value="$(arg ray_length)"/>
            <param name="allow_clear" value="true"/>
            <param name="verbose" value="false"/>
            <param name="publish_map_incremental" value="true"/>
        </node>
    </group>


    <group ns="experiment">
        <!-- Experiment launcher. Starts Planner, Captures Images etc. -->
        <node name="experiment_node" pkg="embodied_active_learning" type="airsim_experiment.py" output="screen"
              required="true" cwd="node">
            <param name="ns_planner" value="/planner/planner_node"/>
            <param name="ns_airsim" value="/airsim/airsim_node"/>
            <param name="delay" value="$(arg delay)"/>
            <param name="startup_timeout" value="30.0"/>
            <remap from="rgbImage" to="/airsim/airsim_node/$(arg mav_name)/front/Scene"/>
            <remap from="depthImage" to="/airsim/airsim_node/$(arg mav_name)/front/DepthPlanner"/>
            <remap from="semsegImage" to="/airsim/airsim_node/$(arg mav_name)/front/Infrared"/>
        </node>
    </group>

    <group ns="airsim">
        <!-- Airsim Node that Publishes Odometry and Images -->
        <arg name="output" default="screen"/>
        <arg name="publish_clock" default="true"/>
        <arg name="is_vulkan" default="true"/>
        <arg name="host" default="localhost"/>

        <node name="airsim_node" pkg="airsim_ros_pkgs" type="airsim_node" output="$(arg output)" respawn="true">
            <param name="is_vulkan" type="bool" value="false"/>
            <!-- ROS timer rates. Note that timer callback will be processed at maximum possible rate, upperbounded by the following ROS params -->
            <param name="update_airsim_img_response_every_n_sec" type="double" value="0.3"/>
            <param name="update_airsim_control_every_n_sec" type="double" value="0.05"/>
            <param name="update_lidar_every_n_sec" type="double" value="10"/>
            <param name="publish_clock" type="bool" value="$(arg publish_clock)"/>
            <param name="host_ip" type="string" value="$(arg host)"/>
            <remap from="drone_1/points" to="airsim_node/drone_1/front/DepthPlanner/registered/points"/>
        </node>

        <!-- Static transforms -->
        <include file="$(find airsim_ros_pkgs)/launch/static_transforms.launch"/>

        <!-- Airsim position controller -->
        <node name="pid_position_node" pkg="airsim_ros_pkgs" type="pd_position_controller_simple_node" output="log">
            <remap from="/airsim_node/odom_local_ned" to="airsim_node/drone_1/odom_local_ned"/>
            <remap from="/airsim_node/home_geo_point" to="airsim_node/origin_geo_point"/>
            <remap from="/vel_cmd_world_frame" to="airsim_node/drone_1/vel_cmd_world_frame"/>
            <remap from="/airsim_node/gps_goal" to="airsim_node/gps_goal"/>
            <remap from="/airsim_node/local_position_goal/override" to="airsim_node/local_position_goal/override"/>
            <param name="update_control_every_n_sec" type="double"
                   value="0.01"/>
            <!-- this needs to be in sync with airsim_ros_wrapper? -->
            <param name="kp_x" type="double" value="0.50"/>
            <param name="kp_y" type="double" value="0.50"/>
            <param name="kp_z" type="double" value="0.20"/>
            <param name="kp_yaw" type="double" value="0.3"/>
            <param name="kd_x" type="double" value="0.3"/>
            <param name="kd_y" type="double" value="0.3"/>
            <param name="kd_z" type="double" value="0.2"/>
            <param name="kd_yaw" type="double" value="0.1"/>
            <param name="reached_thresh_xyz" type="double" value="0.02"/>
            <param name="reached_yaw_degrees" type="double" value="0.1"/>
        </node>
        <!-- Node that connects trajectory planner with Airsim PID Position Controller -->
        <node type="trajectory_caller_node" name="trajectory_caller_node" pkg="embodied_active_learning"
              output="screen">

            <param name="real_time" value="true"/>
            <param name="verbose" value="false"/>
            <param name="move_in_yaw" value="$(arg yaw_in_move_direction)"/>
            <remap from="/local_position_goal" to="airsim_node/local_position_goal/override"/>
            <remap from="/command/trajectory" to="$(arg mav_name)/command/trajectory"/>
            <remap from="/odom" to="airsim_node/drone_1/odom_local_ned"/>
            <remap from="/collision" to="/airsim/drone_1/collision"/>
            <remap from="waypoint_reached" to="/planner/waypoint_reached"/>
            <remap from="/gain" to="/planner/trajectory/gain"/>
        </node>

    </group>


    <group ns="planner">
        <!-- Voxblox -->
        <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
            <remap from="pointcloud" to="/airsim/airsim_node/drone_1/points"/>

            <param name="use_tf_transforms" value="true"/>
            <param name="publish_tsdf_map" value="true"/>
            <param name="publish_esdf_map" value="true"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="color_mode" value="color"/>
            <param name="update_mesh_every_n_sec" value="$(arg publish_mesh)"/>
            <param name="method" value="$(arg method)"/>
            <param name="max_ray_length" value="$(arg ray_length)"/>
            <param name="allow_clear" value="true"/>
            <param name="verbose" value="$(arg verbose_voxblox)"/>
            <param name="publish_map_incremental" value="true"/>

        </node>


        <!-- Use active planner -->
        <group if="$(eval planner_type == 'mav_active_planner')">
            <param name="/uncertainty/map/use_tf_transforms" value="false"/>
            <param name="/uncertainty/map/tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="/uncertainty/map/tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="update_mesh_every_n_sec" value="$(arg publish_mesh)"/>
            <param name="/uncertainty/map/publish_traversable" value="false"/>

            <node name="planner_node" pkg="embodied_active_learning" type="curiosity_planner_node"
                  output="screen">

                <remap from="colision" to="/airsim/drone_1/collision"/>
                <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out"/>
                <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out"/>
                <!-- Uncertainty Map -->
                <remap from="/uncertainty/map/esdf_map_in" to="/uncertainty/voxblox_uncertainty_node/esdf_map_out"/>
                <remap from="/uncertainty/map/tsdf_map_in" to="/uncertainty/voxblox_uncertainty_node/tsdf_map_out"/>
                <param name="use_tf_transforms" value="false"/>
                <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
                <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
                <param name="update_mesh_every_n_sec" value="$(arg publish_mesh)"/>
                <param name="publish_traversable" value="true"/>

                <!-- General Settings -->
                <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
                <remap from="command/trajectory" to="/airsim/$(arg mav_name)/command/trajectory"/>
                <!-- Build the Planner by Configuration     -->
                <rosparam command="load"
                          file="$(find embodied_active_learning)/cfg/planners/$(arg planner_config)"/>
            </node>
        </group>

        <!-- Use Bump and Rotate planner -->
        <group if="$(eval planner_type == 'bump_and_rotate')">
            <node name="bump_and_rotate_planner" pkg="embodied_active_learning" type="bump_and_rotate_planner_node.py"
                  output="screen">
                <remap from="command/trajectory" to="/airsim/$(arg mav_name)/command/trajectory"/>
                <remap from="odometry" to="/airsim/airsim_node/drone_1/odom_local_ned"/>
            </node>
        </group>

        <!-- Use Space filling curves planner -->
        <group if="$(eval planner_type == 'space_filling_curves')">
            <node name="space_filling_curves_planner" pkg="embodied_active_learning"
                  type="space_filling_curves_planner.py" output="screen">
                <remap from="command/trajectory" to="/airsim/$(arg mav_name)/command/trajectory"/>
                <remap from="odometry" to="/airsim/airsim_node/drone_1/odom_local_ned"/>
            </node>
        </group>

    </group>
    <!-- RVIZ Visualization -->
    <node type="rviz" name="rviz_voxblox" pkg="rviz"
          args="-d $(find embodied_active_learning)/cfg/experiments/experiment_visualization.rviz"/>
</launch>
