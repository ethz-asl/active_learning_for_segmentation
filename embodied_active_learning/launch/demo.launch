<launch>

    <!-- Voxblox arguments -->
    <arg name="voxel_size" default="0.1"/>
    <arg name="voxels_per_side" default="16"/>
    <arg name="ray_length" default="20.0"/>
    <arg name="method" default="fast"/>
    <arg name="verbose_voxblox" default="false"/>
    <arg name="delay" default="3.0"/>

    <arg name="mav_name" default="drone_1"/>

    <!--  Experiment arguments -->
    <arg name="experiment_config" default="CityBuilding.yaml"/>
    <rosparam command="load" file="$(find active_3d_planning_app_curiosity)cfg/experiments/$(arg experiment_config)"/>

    <!-- static world transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_drone_world" args="0 0 0 0 0 0 1 /drone_1 /world 100"/>

    <group ns="experiment">
        <!-- Experiment launcher -->
        <node name="experiment_node" pkg="embodied_active_learning" type="airsim_experiment.py" output="screen"
              required="true">
            <param name="ns_planner" value="/planner/planner_node"/>
            <param name="ns_airsim" value="/airsim/airsim_node"/>
            <param name="delay" value="$(arg delay)"/>
            <param name="startup_timeout" value="30.0"/>
        </node>
    </group>


    <group ns="airsim">
        <!-- Pointcloud from RGB + Depth-->
        <node pkg="nodelet" type="nodelet" args="manager" name="depth_to_pointcloud_manager" output="screen"/>

        <!-- Nodelets! -->
        <!-- Convert it into a point cloud -->
        <node pkg="nodelet" type="nodelet" name="airsim_depth2cloud" args="load depth_image_proc/point_cloud_xyzrgb depth_to_pointcloud_manager" output="screen">
            <remap from="depth_registered/image_rect" to="airsim_node/drone_1/front/DepthPlanner"/>
            <remap from="depth_registered/points" to="airsim_node/drone_1/front/DepthPlanner/registered/points"/>
            <remap from="rgb/image_rect_color" to="airsim_node/drone_1/front/Scene"/>
            <remap from="rgb/camera_info" to="airsim_node/drone_1/front/Scene/camera_info"/>
        </node>


        <!-- Airsim Node -->
        <include file="$(find airsim_ros_pkgs)/launch/airsim_node.launch"/>

        <!-- Airsim position controller -->

        <node name="pid_position_node" pkg="airsim_ros_pkgs" type="pd_position_controller_simple_node" output="screen">

            <remap from="/airsim_node/odom_local_ned" to="airsim_node/drone_1/odom_local_ned"/>
            <remap from="/airsim_node/home_geo_point" to="airsim_node/origin_geo_point"/>
            <remap from="/vel_cmd_world_frame" to="airsim_node/drone_1/vel_cmd_world_frame"/>
            <remap from="/airsim_node/gps_goal" to="airsim_node/gps_goal"/>
            <remap from="/airsim_node/local_position_goal/" to="airsim_node/local_position_goal/override"/>

            <param name="update_control_every_n_sec" type="double" value="0.01" /> <!-- this needs to be in sync with airsim_ros_wrapper? -->
            <param name="kp_x" type="double" value="0.30" />
            <param name="kp_y" type="double" value="0.30" />
            <param name="kp_z" type="double" value="0.30" />
            <param name="kp_yaw" type="double" value="0.30" />

            <param name="kd_x" type="double" value="0.05" />
            <param name="kd_y" type="double" value="0.05" />
            <param name="kd_z" type="double" value="0.05" />
            <param name="kd_yaw" type="double" value="0.05" />

            <param name="reached_thresh_xyz" type="double" value="0.1" />
            <param name="reached_yaw_degrees" type="double" value="5.0" />
        </node>


        <!-- Node that connects trajectory planner with Airsim Position controller -->
        <node type="trajectory_caller_node" name="trajectory_caller_node" pkg="active_3d_planning_app_curiosity">
            <remap from = "/local_position_goal" to ="airsim_node/local_position_goal/override"/>
            <remap from="/command/trajectory" to="$(arg mav_name)/command/trajectory"/>
            <remap from="/odom" to="airsim_node/drone_1/odom_local_ned" />
        </node>
    </group>

    <group ns="planner">
        <!-- Voxblox -->
        <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
            <remap from="pointcloud" to="/airsim/airsim_node/drone_1/front/DepthPlanner/registered/points"/>
            <param name="use_tf_transforms" value="true"/>
            <param name="publish_tsdf_map" value="true"/>
            <param name="publish_esdf_map" value="true"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)"/>
            <param name="color_mode" value="color"/>
            <param name="update_mesh_every_n_sec" value="1.0"/>
            <param name="method" value="$(arg method)"/>
            <param name="max_ray_length" value="$(arg ray_length)"/>
            <param name="allow_clear" value="true"/>
            <param name="verbose" value="$(arg verbose_voxblox)"/>
            <param name="publish_map_incremental" value="true"/>
            <param name="min_ray_length_m" value="0.2"/>
        </node>

        <!-- Planner -->
        <node name="planner_node" pkg="active_3d_planning_app_curiosity" type="curiosity_planner_node" output="screen">
            <!-- Voxblox Server -->
            <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out"/>
            <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out"/>
            <param name="use_tf_transforms" value="false"/>
            <param name="tsdf_voxel_size" value="$(arg voxel_size)"/>
            <param name="tsdf_voxels_per_srqt_ide" value="$(arg voxels_per_side)"/>
            <param name="update_mesh_every_n_sec" value="1.0"/>
            <param name="publish_traversable" value="false"/>

            <!-- General Settings -->
            <remap from="odometry" to="/airsim/airsim_node/$(arg mav_name)/odom_local_ned"/>
            <remap from="command/trajectory" to="/airsim/$(arg mav_name)/command/trajectory"/>

            <!-- Build the Planner by Configuration     -->
            <rosparam command="load" file="$(find active_3d_planning_app_curiosity)/cfg/planners/airsim.yaml"/>
        </node>
    </group>

    <!-- RVIZ Visualization -->
    <node type="rviz" name="rviz_voxblox" pkg="rviz"
          args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/experiment_visualization.rviz"/>


</launch>
